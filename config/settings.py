"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET", "NTfF6fEHnYx^P6@HJx@K6M")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG") == "True"

# django-dotenv 패키지를 설치하고 로컬에 .env 파일을 생성해서 DEBUG 변수를 정의해 놓음으로써
# 로컬과 AWS에 서로 조금씩 다르게 정의되어 있는 환경변수를 각 환경에 맞게 적용할 수 있음
# 참고로 로컬의 .env에는 DEBUG 변수가 True로 정의되어 있지만, AWS에는 DEBUG 환경변수가 없음
if DEBUG:
    ALLOWED_HOSTS = []
else:
    ALLOWED_HOSTS = [".elasticbeanstalk.com", "localhost"]

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

PROJECT_APPS = [
    "common.apps.CommonConfig",
    "groups.apps.GroupsConfig",
    "users.apps.UsersConfig",
    "restaurants.apps.RestaurantsConfig",
    "menus.apps.MenusConfig",
    "orders.apps.OrdersConfig",
]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "HOST": os.environ.get("RDS_HOST"),
            "NAME": os.environ.get("RDS_NAME"),
            "USER": os.environ.get("RDS_USER"),
            "PASSWORD": os.environ.get("RDS_PASSWORD"),
            "PORT": "5432",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Image 파일 저장을 위한 설정(uploads폴더는 .gitignore에 추가하는게 좋음)
# config.urls에도 로컬에서 uploads의 파일을 사용하기 위해 설정 필요
# 업로드를 위한 경로 설정
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")

# MEDIA_ROOT에서 온 MEDIA를 다루는 URL
# uploads 폴더에 있는 이미지 파일 가져오기 위한 url 경로 설정
MEDIA_URL = "/media/"

# 기본적으로 주어지는 User Model을 사용하는게 아닌,
# 우리가 원하는 형태로 바꿔 사용하기 위한 설정(Custom Model)
# 여기서는 users.User를 사용하겠다는 뜻임
AUTH_USER_MODEL = "users.User"


# S3 설정
if not DEBUG:
    """
    https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
    원래 가이드대로라면 DEFAULT_FILE_STORAGE, STATICFILES_STORAGE
    둘다 storages.backends.s3boto3.S3Boto3Storage 로 값을 줘야한다.
    근데 이렇게 하면 upload와 static 파일이 모두 같은 폴더로 가게 되기 때문에
    경로를 다르게 지정해주는게 좋다.
    config/custom_strages.py 생성하여 따로 저장되게 경로 설정.
    """
    DEFAULT_FILE_STORAGE = "config.custom_storages.UploadStorage"
    STATICFILES_STORAGE = "config.custom_storages.StaticStorage"

    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = "yogiyo-clone-aws"
    AWS_AUTO_CREATE_BUCKET = True
    AWS_BUCKET_ACL = "public-read"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}

    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"

